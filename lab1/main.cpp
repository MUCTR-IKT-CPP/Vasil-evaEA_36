#include <iostream>
#include <vector>

using namespace std;

/**
 * @brief Функция для нахождения простых чисел до числа n
 * с использованием алгоритма решета Эратосфена.
 *
 * @param n Верхний предел, до которого нужно найти простые числа.
 */
void algorithm_of_eratosthenes(int n) {
    // Создаем вектор булевых значений для чисел от 0 до n.
    // Изначально все числа считаются простыми (true), кроме 0 и 1.
    std::vector<bool> is_prime(n + 1, true);
    is_prime[0] = is_prime[1] = false; // 0 и 1 не являются простыми числами.

    // Проходим по числам от 2 до √n (предельное значение, где нужно вычеркивать).
    for (int i = 2; i * i <= n; i++) {
        // Если число простое (не было вычеркнуто),
        // то вычеркиваем все его кратные, начиная с i^2.
        if (is_prime[i]) {
            // Вычеркивание кратных числа i.
            for (int j = i * i; j <= n; j += i) {
                is_prime[j] = false; // Число не простое.
            }
        }
    }

    // Выводим все числа, которые остались простыми.
    for (int i = 2; i <= n; i++) {
        if (is_prime[i]) {
            std::cout << i << " "; // Вывод простого числа.
        }
    }
    std::cout << std::endl;
}

/**
 * @brief Основная функция программы, где происходит ввод и вывод данных.
 */
int main() {
    int n;

    // Задаем любое число n.
    std::cout << "\nEnter number: ";
    std::cin >> n;

    // Выводим простые числа до заданного числа, используя функцию решета Эратосфена.
    std::cout << "\nPrime numbers up to " << n << ": ";
    algorithm_of_eratosthenes(n); // Вызов функции для нахождения простых чисел.

    return 0;
}


